// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String   @id @default(cuid())
  nameTitle String
  firstName String
  lastName  String
  email     String   @unique
  password  String
  sex       Sex
  role      Role
  student   Student?
  teacher   Teacher?
  admin     Admin?

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model University {
  id             String    @id @default(cuid())
  emblemImageSrc String
  name           String
  faculties      Faculty[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Faculty {
  id           String       @id @default(cuid())
  name         String
  universityId String
  university   University   @relation(fields: [universityId], references: [id])
  curriculums  Curriculum[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Curriculum {
  id          String    @id @default(cuid())
  degreeName  String
  programName String
  facultyId   String
  faculty     Faculty   @relation(fields: [facultyId], references: [id])
  students    Student[]
  teachers    Teacher[]
  courses     Course[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Teacher {
  id                     String          @id @default(cuid())
  universityTeacherId    String
  identificationNumber   String
  affiliatedCurriculumId String
  affiliatedCurriculum   Curriculum      @relation(fields: [affiliatedCurriculumId], references: [id])
  userId                 String          @unique
  user                   User            @relation(fields: [userId], references: [id])
  courses                CourseTeacher[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

enum CloType {
  K
  S
  A
}

enum SkillType {
  SPECIFIC
  GENERAL
  MAIN
  OTHER
}

model Clo {
  id                    String                  @id @default(cuid())
  type                  CloType
  name                  String
  courseId              String
  course                Course                  @relation(fields: [courseId], references: [id])
  GradingCloResult      GradingCloResult[]
  CloSkillLevelCriteria CloSkillLevelCriteria[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Skill {
  id                String       @id @default(cuid())
  skillMappingRefId String
  nameTh            String
  nameEn            String
  descriptionTh     String
  descriptionEn     String
  type              SkillType
  isMainSkill       Boolean      @default(false)
  courseId          String
  course            Course       @relation(fields: [courseId], references: [id])
  skillLevels       SkillLevel[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model SkillLevel {
  id            String               @id @default(cuid())
  skillId       String
  skill         Skill                @relation(fields: [skillId], references: [id])
  level         Int                  @default(1)
  descriptionTh String
  descriptionEn String
  methods       SkillLevelMethod[]
  criterias     SkillLevelCriteria[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model SkillLevelMethod {
  id           String     @id @default(cuid())
  skillLevelId String
  skillLevel   SkillLevel @relation(fields: [skillLevelId], references: [id])
  methodNameTh String
  methodNameEn String
  isDeleted    Boolean    @default(false)
  deletedAt    DateTime?

  @@index([isDeleted, deletedAt])
}

model SkillLevelCriteria {
  id                     String                  @id @default(cuid())
  skillLevelId           String
  skillLevel             SkillLevel              @relation(fields: [skillLevelId], references: [id])
  criteriaNameTh         String
  criteriaNameEn         String
  cloSkillLevelCriterias CloSkillLevelCriteria[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model CloSkillLevelCriteria {
  id                   String             @id @default(cuid())
  courseId             String
  course               Course             @relation(fields: [courseId], references: [id])
  cloId                String
  clo                  Clo                @relation(fields: [cloId], references: [id])
  skillLevelCriteriaId String
  skillLevelCriteria   SkillLevelCriteria @relation(fields: [skillLevelCriteriaId], references: [id])

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model CourseSection {
  id       String          @id @default(cuid())
  courseId String
  course   Course          @relation(fields: [courseId], references: [id])
  section  String
  teachers CourseTeacher[]
  students StudentCourse[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model CourseGradingCriteria {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  grade    Grade
  minScore Float
  maxScore Float

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Course {
  id                     String                  @id @default(cuid())
  skillMappingRefId      String
  courseCode             String
  nameEn                 String
  nameTh                 String
  descriptionEn          String
  descriptionTh          String
  curriculumId           String
  curriculum             Curriculum              @relation(fields: [curriculumId], references: [id])
  clos                   Clo[]
  teachers               CourseTeacher[]
  sections               CourseSection[]
  students               StudentCourse[]
  gradingCriterias       CourseGradingCriteria[]
  skills                 Skill[]
  cloSkillLevelCriterias CloSkillLevelCriteria[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model CourseTeacher {
  id              String         @id @default(cuid())
  courseId        String
  course          Course         @relation(fields: [courseId], references: [id])
  teacherId       String
  teacher         Teacher        @relation(fields: [teacherId], references: [id])
  courseSectionId String
  courseSection   CourseSection? @relation(fields: [courseSectionId], references: [id])

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model StudentCourse {
  id              String                 @id @default(cuid())
  courseId        String
  course          Course                 @relation(fields: [courseId], references: [id])
  studentId       String
  student         Student                @relation(fields: [studentId], references: [id])
  courseSectionId String?
  courseSection   CourseSection?         @relation(fields: [courseSectionId], references: [id])
  gradings        StudentCourseGrading[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model Student {
  id                     String          @id @default(cuid())
  universityStudentId    String
  identificationNumber   String
  birthDate              DateTime
  enrolledDate           DateTime
  affiliatedCurriculumId String
  affiliatedCurriculum   Curriculum      @relation(fields: [affiliatedCurriculumId], references: [id])
  userId                 String          @unique
  user                   User            @relation(fields: [userId], references: [id])
  courses                StudentCourse[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@unique([universityStudentId, affiliatedCurriculumId])
  @@index([isDeleted, deletedAt])
}

enum Grade {
  A
  B_PLUS
  B
  C_PLUS
  C
  D_PLUS
  D
  F
  X
}

enum GradingResult {
  FAIL
  PASS
  GOOD
  VERY_GOOD
  EXCELLENT
  X
}

model StudentCourseGrading {
  id                String             @id @default(cuid())
  studentCourseId   String
  studentCourse     StudentCourse      @relation(fields: [studentCourseId], references: [id])
  gradingDate       DateTime
  grade             Grade              @default(X)
  score             Float              @default(0)
  gradingCloResults GradingCloResult[]

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}

model GradingCloResult {
  id                     String               @id @default(cuid())
  studentCourseGradingId String
  studentCourseGrading   StudentCourseGrading @relation(fields: [studentCourseGradingId], references: [id])
  cloId                  String
  clo                    Clo                  @relation(fields: [cloId], references: [id])
  result                 GradingResult        @default(X)

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([isDeleted, deletedAt])
}
